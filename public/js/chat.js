'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var chat = function () {
    function chat(io) {
        _classCallCheck(this, chat);

        this.socket = io();
        this.box = $('#box'); //messages
        this.name = $('#name'); //input
        this.random = Math.floor(Math.random() * 9 + 1);
        this.messages = [];
        this.colors = ['red', 'black', 'blue', 'yellow', 'purple', 'orange', 'grey', 'pink'];
    }

    _createClass(chat, [{
        key: 'size',
        value: function size() {
            var myWidth = window.innerWidth;
            if (myWidth <= 600) {
                for (var i = 0; i < 4; i++) {
                    $('.prefix' + i).removeClass('prefix');
                }
                $('.input_messages').removeClass('s11').addClass('s9');
                $('.button').removeClass('s1').addClass('s3');
            }
        }
    }, {
        key: 'materialize',
        value: function materialize() {
            Materialize.toast('Bienvenido al chat de AndrÃ©s.', 4000);
        }
    }, {
        key: 'sendMessage',
        value: function sendMessage() {
            var _this = this;

            this.socket.on('message', function (data) {
                _this.messages.push(data);
                //sends data to code html
                var html = '';
                for (var i = 0; i < _this.messages.length; i++) {
                    html += '<li style=\'color: ' + _this.messages[i].color + ';\'> ' + (_this.messages[i].username ? _this.messages[i].username : 'Server') + ': </li>';
                    html += '<li>' + _this.messages[i].message + '</li><br/>';
                }
                //scroll down
                _this.animate();
                //send html code generated by the for
                $('.messages').html(html);
            });
        }
    }, {
        key: 'animate',
        value: function animate() {
            $('#content').animate({
                scrollTop: $('#content')[0].scrollHeight
            }, 100);
        }
    }, {
        key: 'buttonClick',
        value: function buttonClick() {
            if (this.name.val() != '') {
                //$('#name').attr('disabled', 'disabled')
                //hide textbox
                $('.namebox').hide(1000);
                this.socket.emit('send', {
                    message: this.box.val(),
                    username: this.name.val(),
                    color: this.colors[this.random]
                });
                this.box.val('');
            }
        }
    }, {
        key: 'main',
        value: function main() {
            var _this2 = this;

            this.size();
            this.materialize();
            this.sendMessage();
            $('#send').click(function () {
                _this2.buttonClick();
            });
            $('#box').keypress(function (e) {
                if (e.which == 13) {
                    _this2.buttonClick();
                }
            });
        }
    }]);

    return chat;
}();

$(document).ready(function () {
    var main = new chat(io);
    main.main();
});